/**
 * @overview
 * auto configs the package.jsons and tsconfigs inside src/node_modules
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const packagesRoot = path.join(
  __dirname,
  "..",
  "src",
  "node_modules",
  "@coglite"
);

const packages = fs
  .readdirSync(packagesRoot)
  .filter((item) => fs.lstatSync(path.join(packagesRoot, item)).isDirectory());

const PACKAGE_TSCONFIG = "tsconfig.package.json";
const PROJECT_TSCONFIG = "tsconfig.project.json";
const TSCONFIG_COMMENT = `// GENERATED by update-pkg-refs on ${new Date().toDateString()}\n`;
const internalDependencyMap = new Map();

const packageDirectories = fs
  .readdirSync(packagesRoot)
  .filter((item) => fs.lstatSync(path.join(packagesRoot, item)).isDirectory());

const packageJSONMap = new Map();
const packageDirnameMap = new Map();

async function update_pkg_jsons() {
  packages.forEach((packageName) => {
    const packageJSONPath = path.join(
      packagesRoot,
      packageName,
      "package.json"
    );
    const packageJSONData = JSON.parse(
      fs.readFileSync(packageJSONPath).toString()
    );
    delete packageJSONData.scripts;
    packageJSONData.main = "./lib/index.js";
    packageJSONData.types = "./lib/index.d.ts";
    packageJSONData.files = ["lib", "src"];
    // packageJSONData.scripts = {
    //   build: "rimraf lib && tsc -b ./tsconfig.package.json",
    //   "clean:packages": "rimraf lib",
    //   prepublish: "npm run build"
    // };
    // packageJSONData.publishConfig = {
    //   access: "public"
    // };

    fs.writeFileSync(
      packageJSONPath,
      JSON.stringify(packageJSONData, null, "  ")
    );
  });
}

packageDirectories.forEach((packageDirname) => {
  const packageJSONPath = path.join(
    packagesRoot,
    packageDirname,
    "package.json"
  );
  const packageJSONData = JSON.parse(
    fs.readFileSync(packageJSONPath).toString()
  );
  const packageName = packageJSONData.name;
  packageDirnameMap.set(packageName, packageDirname);
  packageJSONMap.set(packageName, packageJSONData);
});

packageDirnameMap.forEach((_packageDirname, packageName) => {
  const { dependencies, devDependencies } = packageJSONMap.get(packageName);
  const internalDependencies = [
    ...(dependencies ? Object.keys(dependencies) : []),
    ...(devDependencies ? Object.keys(devDependencies) : []),
  ].filter((dep) => packageDirnameMap.has(dep));
  internalDependencyMap.set(packageName, internalDependencies);
});

function resolveInternalDependencies(dependencies) {
  const childDeps = [];
  for (let idep of dependencies) {
    const deps = internalDependencyMap.get(idep);
    const res = resolveInternalDependencies(deps);
    for (let jdep of res) {
      childDeps.push(jdep);
    }
  }
  const resolved = childDeps.concat(dependencies);
  // remove all duplicated after the first appearance
  return resolved.filter((item, idx) => resolved.indexOf(item) === idx);
}

packageDirnameMap.forEach((packageDirname, packageName) => {
  const tsconfigPath = path.join(
    packagesRoot,
    packageDirname,
    PACKAGE_TSCONFIG
  );
  const internalDependencies = resolveInternalDependencies(
    internalDependencyMap.get(packageName)
  );
  const tsconfigData = {
    extends: "../../../../tsconfig.json",
    compilerOptions: {
      outDir: "./lib",
      rootDir: "./src",
      incremental: true,
      target: "es2019",
      jsx: "react-jsx",
      module: "esnext",
      allowSyntheticDefaultImports: true,
      declaration: true,
      declarationMap: true,
      sourceMap: false,
      experimentalDecorators: true,
      pretty: true,
      skipLibCheck: true,
      composite: true,
      allowJs: true,
      esModuleInterop: false,
      strict: false,
      forceConsistentCasingInFileNames: true,
      resolveJsonModule: true,
      isolatedModules: false,
      noEmit: false,
      noFallthroughCasesInSwitch: true
    },
    references: internalDependencies.map((dep) => {
      return { path: `../${packageDirnameMap.get(dep)}/${PACKAGE_TSCONFIG}` };
    }),
    include: ["src"],
    exclude: ["tests", "lib"],
  };

  fs.writeFileSync(
    tsconfigPath,
    TSCONFIG_COMMENT + JSON.stringify(tsconfigData, null, "  ")
  );
});

const projectLevelTsconfigPath = path.join(packagesRoot, PROJECT_TSCONFIG);

const projectLevelTsconfigData = {
  files: [],
  references: resolveInternalDependencies(
    Array.from(packageDirnameMap.keys())
  ).map((packageName) => ({
    path: `./${packageDirnameMap.get(packageName)}/${PACKAGE_TSCONFIG}`,
  })),
};

async function update_ts_configs() {
  fs.writeFileSync(
    projectLevelTsconfigPath,
    TSCONFIG_COMMENT + JSON.stringify(projectLevelTsconfigData, null, "  ")
  );
}

const update = async () => {
  Promise.all([update_pkg_jsons(), update_ts_configs()]);
};

update();
