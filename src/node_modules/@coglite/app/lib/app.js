import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { defaultTheme, Header } from '@coglite/common';
import { createStyles, ThemeProvider, withStyles } from '@material-ui/core/styles';
import { styled } from '@material-ui/styles';
import { configure } from 'mobx';
import { CounterButton, MyButton } from './ButtonTest';
configure({ enforceActions: "observed" });
const theme = defaultTheme();
const Root = styled('div')({
    display: 'grid',
    gridTemplateColumns: 200,
    gridTemplateRows: '100px 100px',
    justifyContent: 'center',
    alignContent: 'center',
    width: '100%',
    height: '100%',
});
const Count = styled('div')({
    background: 'azure',
    display: 'grid',
    justifyContent: 'center',
    alignContent: 'center',
    gridColumn: '1 / 2',
    gridRow: '1 / 2',
});
const PastEvents = styled('div')({
    display: 'grid',
    gridColumn: '1 / 2',
    gridRow: '2 / 3',
});
const styles = (theme) => createStyles({
    '@global': {
        html: {
            height: '100%',
            boxSizing: 'border-box',
        },
        '*, *:before, *:after': {
            boxSizing: 'inherit',
        },
        body: {
            height: '100%',
            margin: 0,
            background: theme.palette.background.default,
            fontFamily: theme.typography.fontFamily,
            fontSize: theme.typography.fontSize,
            color: theme.palette.text.primary,
            // Helps fonts on OSX look more consistent with other systems
            WebkitFontSmoothing: 'antialiased',
            MozOsxFontSmoothing: 'grayscale',
            // Use momentum-based scrolling on iOS devices
            WebkitOverflowScrolling: 'touch',
        },
        '#coglite-app-root': {
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
        },
    },
    root: {
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
    },
});
export const App = withStyles(styles)((props) => {
    return (_jsx(ThemeProvider, Object.assign({ theme: theme }, { children: _jsxs("div", Object.assign({ className: props.classes.root }, { children: [_jsx(Header, { children: "Home" }, void 0),
                _jsxs(Root, { children: [_jsx(CounterButton, {}, void 0),
                        _jsx(MyButton, Object.assign({ onClick: e => console.log('hi'), color: 'black' }, { children: "my button" }), void 0)] }, void 0)] }), void 0) }), void 0));
});
export default App;
